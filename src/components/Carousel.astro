---
import BotonesCarousel from "@/components/BotonesCarousel.astro";
---

<section id="carousel" class="carousel">
    <div id="carousel-container" class="carousel-container">
        <div class="carousel-item" data-item-1>
            <img src="/img/carousel/jovenes-leyendo-1.webp" alt="" />
        </div>
        <div class="carousel-item" data-item-2>
            <img src="/img/carousel/jovenes-leyendo-2.webp" alt="" />
        </div>
        <div class="carousel-item" data-item-3>
            <img src="/img/carousel/jovenes-leyendo-3.webp" alt="" />
        </div>
        <div class="carousel-item" data-item-4>
            <img src="/img/carousel/joven-leyendo-1.webp" alt="" />
        </div>
        <div class="carousel-item" data-item-5>
            <img src="/img/carousel/joven-leyendo-2.webp" alt="" />
        </div>
        <div class="carousel-item" data-item-5>
            <img src="/img/carousel/pasaporte-lector.webp" alt="" />
        </div>
    </div>
    <BotonesCarousel />
</section>

<style>
    .carousel {
        position: relative;
        overflow: hidden;
        width: 100%;
        height: 500px;
        border-radius: 8px;
        margin-bottom: 28px;
        /* box-shadow: 2px 5px 5px 3px rgba(0, 0, 0, 0.3); */
        outline: 1px solid var(--border);
        box-shadow: 4px 4px 0 var(--border);
    }
    .carousel-container {
        position: relative;
        display: flex;
        height: 100%;
        transform: translateX(var(--slide-transform));
        transition: var(--transition);
    }
    .carousel-item {
        min-width: 100%;
    }
    .carousel-item img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
</style>

<script>
    document.addEventListener("astro:page-load", () => {
        const carousel = document.getElementById("carousel");
        const containerOfSlider = document.getElementById("carousel-container");
        const listSlidersInCarousel =
            document.querySelectorAll(".carousel-item");
        const buttonRight = document.getElementById("sliderButtonRight");
        const buttonLeft = document.getElementById("sliderButtonLeft");

        let counterSlider = 1;
        let directionClick = "";
        let isInTransition = false;
        let intervalId: number;
        const MOVE_SLIDER = {
            RIGHT: "RIGHT",
            LEFT: "LEFT",
        };

        // ------------------------------------------------
        // ------------------------------------------------
        const getWidthCarousel = (): number => {
            return carousel.getBoundingClientRect().width;
        };
        const getValueVarTransformCSS = (): number => {
            return Number(
                getComputedStyle(document.documentElement)
                    .getPropertyValue("--slide-transform")
                    .trim()
                    .replace("px", "")
            );
        };
        const disableTransition = () => {
            document.documentElement.style.setProperty("--transition", "none");
        };
        const moveSlideToRight = () => {
            const nuevoValor = getValueVarTransformCSS() - getWidthCarousel();
            document.documentElement.style.setProperty(
                "--slide-transform",
                `${nuevoValor}px`
            );
        };
        const moveSlideToLeft = () => {
            const nuevoValor = getValueVarTransformCSS() + getWidthCarousel();
            document.documentElement.style.setProperty(
                "--slide-transform",
                `${nuevoValor}px`
            );
        };
        const sortCarousel = () => {
            disableTransition();
            // Si hay un solo elemento, no se hace nada
            if (listSlidersInCarousel.length == 1) return;
            else if (listSlidersInCarousel.length == 2) {
                // Only two elements in the slider
                const newElement = containerOfSlider.lastElementChild;
                containerOfSlider.prepend(newElement.cloneNode(true));
            } else if (listSlidersInCarousel.length > 2) {
                // If there are more two elements in the slider
                if (counterSlider == 1) {
                    const lastElement = containerOfSlider.lastElementChild;
                    containerOfSlider.prepend(lastElement);
                }
            }
            moveSlideToRight();
        };
        const resetInterval = () => {
            clearInterval(intervalId);
            intervalId = setInterval(
                () => sortSliderAfterClick(MOVE_SLIDER.RIGHT),
                3500
            );
        };
        const sortSliderAfterClick = (direction: string) => {
            if (isInTransition) return;
            isInTransition = true;
            document.documentElement.style.setProperty(
                "--transition",
                "transform 1s ease"
            );

            if (direction == MOVE_SLIDER.RIGHT) {
                directionClick = direction;
                if (listSlidersInCarousel.length == 2) {
                    const newElement = containerOfSlider.children[1];
                    containerOfSlider.appendChild(newElement.cloneNode(true));
                    moveSlideToRight();
                } else if (listSlidersInCarousel.length > 2) {
                    counterSlider++;
                    if (counterSlider == listSlidersInCarousel.length - 1) {
                        // Estoy en la última posición
                        moveSlideToRight();
                    } else if (
                        counterSlider !=
                        listSlidersInCarousel.length - 1
                    ) {
                        moveSlideToRight();
                        counterSlider++;
                    }
                }
            } else if (direction == MOVE_SLIDER.LEFT) {
                directionClick = direction;
                if (listSlidersInCarousel.length == 2) {
                    moveSlideToLeft();
                } else if (listSlidersInCarousel.length > 2) {
                    if (counterSlider == 1) {
                        // Estoy en la primera posición
                        moveSlideToLeft();
                    } else if (counterSlider > 1) {
                        moveSlideToLeft();
                        counterSlider--;
                    }
                }
            }
        };

        buttonRight.addEventListener("click", () => {
            sortSliderAfterClick(MOVE_SLIDER.RIGHT);
            resetInterval();
        });
        buttonLeft.addEventListener("click", () => {
            sortSliderAfterClick(MOVE_SLIDER.LEFT);
            resetInterval();
        });

        containerOfSlider.addEventListener("transitionend", (e) => {
            if (isInTransition) {
                isInTransition = false;
                if (directionClick == MOVE_SLIDER.RIGHT) {
                    if (counterSlider == listSlidersInCarousel.length - 1) {
                        const firstElement =
                            containerOfSlider.firstElementChild;
                        containerOfSlider.appendChild(firstElement);
                        counterSlider--;
                        disableTransition();
                        moveSlideToLeft();
                    } else {
                        disableTransition();
                    }
                } else if (directionClick == MOVE_SLIDER.LEFT) {
                    if (counterSlider == 1) {
                        disableTransition();
                        const lastElement = containerOfSlider.lastElementChild;
                        containerOfSlider.prepend(lastElement);
                        moveSlideToRight();
                    } else {
                        disableTransition();
                        let newElement: Element;
                        if (listSlidersInCarousel.length == 2) {
                            newElement = containerOfSlider.children[1];
                        } else if (listSlidersInCarousel.length > 2) {
                            newElement = containerOfSlider.lastElementChild;
                        }
                        containerOfSlider.prepend(newElement.cloneNode(true));
                        moveSlideToRight();
                        containerOfSlider.removeChild(
                            containerOfSlider.lastElementChild
                        );
                    }
                }
            }
        });

        sortCarousel();
        intervalId = setInterval(
            () => sortSliderAfterClick(MOVE_SLIDER.RIGHT),
            3500
        );
    });
</script>
